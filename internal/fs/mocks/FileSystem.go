// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FileSystem is an autogenerated mock type for the FileSystem type
type FileSystem struct {
	mock.Mock
}

// ChangeDirectory provides a mock function with given fields: name
func (_m *FileSystem) ChangeDirectory(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ChangeDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clear provides a mock function with given fields:
func (_m *FileSystem) Clear() {
	_m.Called()
}

// CurPath provides a mock function with given fields:
func (_m *FileSystem) CurPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// List provides a mock function with given fields: write, more
func (_m *FileSystem) List(write func(string), more bool) error {
	ret := _m.Called(write, more)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(string), bool) error); ok {
		r0 = rf(write, more)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenFile provides a mock function with given fields: name
func (_m *FileSystem) OpenFile(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: name, rw, data
func (_m *FileSystem) WriteFile(name string, rw bool, data string) error {
	ret := _m.Called(name, rw, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, string) error); ok {
		r0 = rf(name, rw, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteZip provides a mock function with given fields:
func (_m *FileSystem) WriteZip() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WriteZip")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFileSystem creates a new instance of FileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileSystem {
	mock := &FileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
